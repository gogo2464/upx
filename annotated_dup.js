var annotated_dup =
[
    [ "anonymous_namespace{dt_check.cpp}", "namespaceanonymous__namespace_02dt__check_8cpp_03.html", [
      [ "CheckAlignment", "structanonymous__namespace_02dt__check_8cpp_03_1_1CheckAlignment.html", "structanonymous__namespace_02dt__check_8cpp_03_1_1CheckAlignment" ],
      [ "CheckIntegral", "structanonymous__namespace_02dt__check_8cpp_03_1_1CheckIntegral.html", "structanonymous__namespace_02dt__check_8cpp_03_1_1CheckIntegral" ],
      [ "CheckSignedness", "structanonymous__namespace_02dt__check_8cpp_03_1_1CheckSignedness.html", "structanonymous__namespace_02dt__check_8cpp_03_1_1CheckSignedness" ],
      [ "CheckTypePair", "structanonymous__namespace_02dt__check_8cpp_03_1_1CheckTypePair.html", "structanonymous__namespace_02dt__check_8cpp_03_1_1CheckTypePair" ],
      [ "TestBELE", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestBELE.html", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestBELE" ],
      [ "TestDestructor", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestDestructor.html", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestDestructor" ],
      [ "TestFloat", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestFloat.html", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestFloat" ],
      [ "TestIntegerWrap", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestIntegerWrap.html", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestIntegerWrap" ],
      [ "TestNoAliasingStruct", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestNoAliasingStruct.html", "structanonymous__namespace_02dt__check_8cpp_03_1_1TestNoAliasingStruct" ]
    ] ],
    [ "anonymous_namespace{dt_cxxlib.cpp}", "namespaceanonymous__namespace_02dt__cxxlib_8cpp_03.html", [
      [ "MyType1", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1MyType1.html", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1MyType1" ],
      [ "MyType2", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1MyType2.html", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1MyType2" ],
      [ "MyVType1", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1MyVType1.html", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1MyVType1" ],
      [ "MyVType2", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1MyVType2.html", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1MyVType2" ],
      [ "TestCT", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1TestCT.html", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1TestCT" ],
      [ "TestTriBool", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1TestTriBool.html", "structanonymous__namespace_02dt__cxxlib_8cpp_03_1_1TestTriBool" ]
    ] ],
    [ "anonymous_namespace{dt_xspan.cpp}", "namespaceanonymous__namespace_02dt__xspan_8cpp_03.html", [
      [ "PointerTraits", "structanonymous__namespace_02dt__xspan_8cpp_03_1_1PointerTraits.html", "structanonymous__namespace_02dt__xspan_8cpp_03_1_1PointerTraits" ]
    ] ],
    [ "anonymous_namespace{help.cpp}", "namespaceanonymous__namespace_02help_8cpp_03.html", [
      [ "PackerNames", "structanonymous__namespace_02help_8cpp_03_1_1PackerNames.html", "structanonymous__namespace_02help_8cpp_03_1_1PackerNames" ]
    ] ],
    [ "anonymous_namespace{pefile.cpp}", "namespaceanonymous__namespace_02pefile_8cpp_03.html", [
      [ "VPtr", "structanonymous__namespace_02pefile_8cpp_03_1_1VPtr.html", "structanonymous__namespace_02pefile_8cpp_03_1_1VPtr" ]
    ] ],
    [ "anonymous_namespace{work.cpp}", "namespaceanonymous__namespace_02work_8cpp_03.html", [
      [ "XStat", "structanonymous__namespace_02work_8cpp_03_1_1XStat.html", "structanonymous__namespace_02work_8cpp_03_1_1XStat" ]
    ] ],
    [ "MyLzma", "namespaceMyLzma.html", [
      [ "InStream", "structMyLzma_1_1InStream.html", "structMyLzma_1_1InStream" ],
      [ "OutStream", "structMyLzma_1_1OutStream.html", "structMyLzma_1_1OutStream" ],
      [ "ProgressInfo", "structMyLzma_1_1ProgressInfo.html", "structMyLzma_1_1ProgressInfo" ]
    ] ],
    [ "N_Elf", "namespaceN__Elf.html", [
      [ "ElfClass_32", "structN__Elf_1_1ElfClass__32.html", "structN__Elf_1_1ElfClass__32" ],
      [ "ElfClass_64", "structN__Elf_1_1ElfClass__64.html", "structN__Elf_1_1ElfClass__64" ],
      [ "ElfITypes", "structN__Elf_1_1ElfITypes.html", "structN__Elf_1_1ElfITypes" ]
    ] ],
    [ "N_Mach", "namespaceN__Mach.html", [
      [ "MachClass_32", "structN__Mach_1_1MachClass__32.html", "structN__Mach_1_1MachClass__32" ],
      [ "MachClass_64", "structN__Mach_1_1MachClass__64.html", "structN__Mach_1_1MachClass__64" ],
      [ "MachITypes", "structN__Mach_1_1MachITypes.html", "structN__Mach_1_1MachITypes" ]
    ] ],
    [ "test_disable_new_delete", "namespacetest__disable__new__delete.html", [
      [ "A1", "structtest__disable__new__delete_1_1A1.html", "structtest__disable__new__delete_1_1A1" ],
      [ "A2", "structtest__disable__new__delete_1_1A2.html", "structtest__disable__new__delete_1_1A2" ],
      [ "B1_A1", "structtest__disable__new__delete_1_1B1__A1.html", "structtest__disable__new__delete_1_1B1__A1" ],
      [ "B1_A2", "structtest__disable__new__delete_1_1B1__A2.html", "structtest__disable__new__delete_1_1B1__A2" ],
      [ "B2_A1", "structtest__disable__new__delete_1_1B2__A1.html", "structtest__disable__new__delete_1_1B2__A1" ],
      [ "B2_A2", "structtest__disable__new__delete_1_1B2__A2.html", "structtest__disable__new__delete_1_1B2__A2" ],
      [ "X1", "structtest__disable__new__delete_1_1X1.html", "structtest__disable__new__delete_1_1X1" ],
      [ "X2", "structtest__disable__new__delete_1_1X2.html", "structtest__disable__new__delete_1_1X2" ],
      [ "Y1_X1", "structtest__disable__new__delete_1_1Y1__X1.html", "structtest__disable__new__delete_1_1Y1__X1" ],
      [ "Y1_X2", "structtest__disable__new__delete_1_1Y1__X2.html", "structtest__disable__new__delete_1_1Y1__X2" ],
      [ "Y2_X1", "structtest__disable__new__delete_1_1Y2__X1.html", "structtest__disable__new__delete_1_1Y2__X1" ],
      [ "Y2_X2", "structtest__disable__new__delete_1_1Y2__X2.html", "structtest__disable__new__delete_1_1Y2__X2" ],
      [ "Z1_X1", "structtest__disable__new__delete_1_1Z1__X1.html", "structtest__disable__new__delete_1_1Z1__X1" ],
      [ "Z1_X2", "structtest__disable__new__delete_1_1Z1__X2.html", "structtest__disable__new__delete_1_1Z1__X2" ],
      [ "Z2_X1", "structtest__disable__new__delete_1_1Z2__X1.html", "structtest__disable__new__delete_1_1Z2__X1" ],
      [ "Z2_X2", "structtest__disable__new__delete_1_1Z2__X2.html", "structtest__disable__new__delete_1_1Z2__X2" ]
    ] ],
    [ "upx", "namespaceupx.html", [
      [ "ArrayDeleter", "structupx_1_1ArrayDeleter.html", "structupx_1_1ArrayDeleter" ],
      [ "is_bounded_array", "structupx_1_1is__bounded__array.html", null ],
      [ "is_bounded_array< T[N]>", "structupx_1_1is__bounded__array_3_01T_0fN_0e_4.html", null ],
      [ "is_same_all", "structupx_1_1is__same__all.html", null ],
      [ "is_same_any", "structupx_1_1is__same__any.html", null ],
      [ "MallocDeleter", "structupx_1_1MallocDeleter.html", "structupx_1_1MallocDeleter" ],
      [ "noncopyable", "classupx_1_1noncopyable.html", "classupx_1_1noncopyable" ],
      [ "ObjectDeleter", "structupx_1_1ObjectDeleter.html", "structupx_1_1ObjectDeleter" ],
      [ "OptVar", "structupx_1_1OptVar.html", "structupx_1_1OptVar" ],
      [ "remove_cvref", "structupx_1_1remove__cvref.html", "structupx_1_1remove__cvref" ],
      [ "TriBool", "structupx_1_1TriBool.html", "structupx_1_1TriBool" ],
      [ "type_identity", "structupx_1_1type__identity.html", "structupx_1_1type__identity" ],
      [ "UnsignedSizeOf", "structupx_1_1UnsignedSizeOf.html", "structupx_1_1UnsignedSizeOf" ]
    ] ],
    [ "AlreadyPackedException", "classAlreadyPackedException.html", "classAlreadyPackedException" ],
    [ "b_info", "structb__info.html", "structb__info" ],
    [ "BE16", "structBE16.html", "structBE16" ],
    [ "BE32", "structBE32.html", "structBE32" ],
    [ "BE64", "structBE64.html", "structBE64" ],
    [ "BEPolicy", "structBEPolicy.html", "structBEPolicy" ],
    [ "bzip2_compress_config_t", "structbzip2__compress__config__t.html", "structbzip2__compress__config__t" ],
    [ "bzip2_compress_result_t", "structbzip2__compress__result__t.html", "structbzip2__compress__result__t" ],
    [ "CantPackException", "classCantPackException.html", "classCantPackException" ],
    [ "CantUnpackException", "classCantUnpackException.html", "classCantUnpackException" ],
    [ "dyld_info_command", "structdyld__info__command.html", "structdyld__info__command" ],
    [ "dylib", "structdylib.html", "structdylib" ],
    [ "dylib_command", "structdylib__command.html", "structdylib__command" ],
    [ "dylinker_command", "structdylinker__command.html", "structdylinker__command" ],
    [ "Elf32_auxv_t", "structElf32__auxv__t.html", "structElf32__auxv__t" ],
    [ "Elf32_Ehdr", "structElf32__Ehdr.html", "structElf32__Ehdr" ],
    [ "Elf32_Phdr", "structElf32__Phdr.html", "structElf32__Phdr" ],
    [ "Elf64_auxv_t", "structElf64__auxv__t.html", "structElf64__auxv__t" ],
    [ "Elf64_Ehdr", "structElf64__Ehdr.html", "structElf64__Ehdr" ],
    [ "Elf64_Phdr", "structElf64__Phdr.html", "structElf64__Phdr" ],
    [ "ElfLinker", "classElfLinker.html", "classElfLinker" ],
    [ "ElfLinkerAMD64", "classElfLinkerAMD64.html", "classElfLinkerAMD64" ],
    [ "ElfLinkerArm64LE", "classElfLinkerArm64LE.html", "classElfLinkerArm64LE" ],
    [ "ElfLinkerArmBE", "classElfLinkerArmBE.html", "classElfLinkerArmBE" ],
    [ "ElfLinkerArmLE", "classElfLinkerArmLE.html", "classElfLinkerArmLE" ],
    [ "ElfLinkerM68k", "classElfLinkerM68k.html", "classElfLinkerM68k" ],
    [ "ElfLinkerMipsBE", "classElfLinkerMipsBE.html", "classElfLinkerMipsBE" ],
    [ "ElfLinkerMipsLE", "classElfLinkerMipsLE.html", "classElfLinkerMipsLE" ],
    [ "ElfLinkerPpc32", "classElfLinkerPpc32.html", "classElfLinkerPpc32" ],
    [ "ElfLinkerPpc64", "classElfLinkerPpc64.html", "classElfLinkerPpc64" ],
    [ "ElfLinkerPpc64le", "classElfLinkerPpc64le.html", "classElfLinkerPpc64le" ],
    [ "ElfLinkerX86", "classElfLinkerX86.html", "classElfLinkerX86" ],
    [ "encryption_info_command", "structencryption__info__command.html", "structencryption__info__command" ],
    [ "encryption_info_command_64", "structencryption__info__command__64.html", "structencryption__info__command__64" ],
    [ "entry_point_command", "structentry__point__command.html", "structentry__point__command" ],
    [ "EOFException", "classEOFException.html", "classEOFException" ],
    [ "Error", "classError.html", "classError" ],
    [ "Exception", "classException.html", "classException" ],
    [ "FileAlreadyExistsException", "classFileAlreadyExistsException.html", "classFileAlreadyExistsException" ],
    [ "FileBase", "classFileBase.html", "classFileBase" ],
    [ "FileNotFoundException", "classFileNotFoundException.html", "classFileNotFoundException" ],
    [ "Filter", "classFilter.html", "classFilter" ],
    [ "FilterImpl", "classFilterImpl.html", "classFilterImpl" ],
    [ "InputFile", "classInputFile.html", "classInputFile" ],
    [ "InternalError", "classInternalError.html", "classInternalError" ],
    [ "IOException", "classIOException.html", "classIOException" ],
    [ "l_info", "structl__info.html", "structl__info" ],
    [ "Lc_seg_info", "structLc__seg__info.html", "structLc__seg__info" ],
    [ "lc_str", "unionlc__str.html", "unionlc__str" ],
    [ "LE16", "structLE16.html", "structLE16" ],
    [ "LE32", "structLE32.html", "structLE32" ],
    [ "LE64", "structLE64.html", "structLE64" ],
    [ "LeFile", "classLeFile.html", "classLeFile" ],
    [ "LEPolicy", "structLEPolicy.html", "structLEPolicy" ],
    [ "linkedit_data_command", "structlinkedit__data__command.html", "structlinkedit__data__command" ],
    [ "lzma_compress_config_t", "structlzma__compress__config__t.html", "structlzma__compress__config__t" ],
    [ "lzma_compress_result_t", "structlzma__compress__result__t.html", "structlzma__compress__result__t" ],
    [ "MemBuffer", "classMemBuffer.html", "classMemBuffer" ],
    [ "MemBufferBase", "classMemBufferBase.html", "classMemBufferBase" ],
    [ "NotCompressibleException", "classNotCompressibleException.html", "classNotCompressibleException" ],
    [ "NotPackedException", "classNotPackedException.html", "classNotPackedException" ],
    [ "Options", "structOptions.html", "structOptions" ],
    [ "OutOfMemoryException", "classOutOfMemoryException.html", "classOutOfMemoryException" ],
    [ "OutputFile", "classOutputFile.html", "classOutputFile" ],
    [ "OverlayException", "classOverlayException.html", "classOverlayException" ],
    [ "p_info", "structp__info.html", "structp__info" ],
    [ "PackBSDElf32x86", "classPackBSDElf32x86.html", "classPackBSDElf32x86" ],
    [ "PackBSDI386", "classPackBSDI386.html", "classPackBSDI386" ],
    [ "PackBvmlinuzI386", "classPackBvmlinuzI386.html", "classPackBvmlinuzI386" ],
    [ "PackCom", "classPackCom.html", "classPackCom" ],
    [ "PackDjgpp2", "classPackDjgpp2.html", "classPackDjgpp2" ],
    [ "PackDylibAMD64", "classPackDylibAMD64.html", "classPackDylibAMD64" ],
    [ "PackDylibI386", "classPackDylibI386.html", "classPackDylibI386" ],
    [ "PackDylibPPC32", "classPackDylibPPC32.html", "classPackDylibPPC32" ],
    [ "PackDylibPPC64", "classPackDylibPPC64.html", "classPackDylibPPC64" ],
    [ "Packer", "classPacker.html", "classPacker" ],
    [ "PackerBase", "classPackerBase.html", "classPackerBase" ],
    [ "PackExe", "classPackExe.html", "classPackExe" ],
    [ "PackFreeBSDElf32x86", "classPackFreeBSDElf32x86.html", "classPackFreeBSDElf32x86" ],
    [ "PackHeader", "structPackHeader.html", "structPackHeader" ],
    [ "PackLinuxElf", "classPackLinuxElf.html", "classPackLinuxElf" ],
    [ "PackLinuxElf32", "classPackLinuxElf32.html", "classPackLinuxElf32" ],
    [ "PackLinuxElf32armBe", "classPackLinuxElf32armBe.html", "classPackLinuxElf32armBe" ],
    [ "PackLinuxElf32armLe", "classPackLinuxElf32armLe.html", "classPackLinuxElf32armLe" ],
    [ "PackLinuxElf32Be", "classPackLinuxElf32Be.html", "classPackLinuxElf32Be" ],
    [ "PackLinuxElf32Le", "classPackLinuxElf32Le.html", "classPackLinuxElf32Le" ],
    [ "PackLinuxElf32mipseb", "classPackLinuxElf32mipseb.html", "classPackLinuxElf32mipseb" ],
    [ "PackLinuxElf32mipsel", "classPackLinuxElf32mipsel.html", "classPackLinuxElf32mipsel" ],
    [ "PackLinuxElf32ppc", "classPackLinuxElf32ppc.html", "classPackLinuxElf32ppc" ],
    [ "PackLinuxElf32x86", "classPackLinuxElf32x86.html", "classPackLinuxElf32x86" ],
    [ "PackLinuxElf32x86interp", "classPackLinuxElf32x86interp.html", "classPackLinuxElf32x86interp" ],
    [ "PackLinuxElf64", "classPackLinuxElf64.html", "classPackLinuxElf64" ],
    [ "PackLinuxElf64amd", "classPackLinuxElf64amd.html", "classPackLinuxElf64amd" ],
    [ "PackLinuxElf64arm", "classPackLinuxElf64arm.html", "classPackLinuxElf64arm" ],
    [ "PackLinuxElf64Be", "classPackLinuxElf64Be.html", "classPackLinuxElf64Be" ],
    [ "PackLinuxElf64Le", "classPackLinuxElf64Le.html", "classPackLinuxElf64Le" ],
    [ "PackLinuxElf64ppc", "classPackLinuxElf64ppc.html", "classPackLinuxElf64ppc" ],
    [ "PackLinuxElf64ppcle", "classPackLinuxElf64ppcle.html", "classPackLinuxElf64ppcle" ],
    [ "PackLinuxI386", "classPackLinuxI386.html", "classPackLinuxI386" ],
    [ "PackLinuxI386sh", "classPackLinuxI386sh.html", "classPackLinuxI386sh" ],
    [ "PackMachAMD64", "classPackMachAMD64.html", "classPackMachAMD64" ],
    [ "PackMachARM64EL", "classPackMachARM64EL.html", "classPackMachARM64EL" ],
    [ "PackMachARMEL", "classPackMachARMEL.html", "classPackMachARMEL" ],
    [ "PackMachBase", "classPackMachBase.html", "classPackMachBase" ],
    [ "PackMachFat", "classPackMachFat.html", "classPackMachFat" ],
    [ "PackMachI386", "classPackMachI386.html", "classPackMachI386" ],
    [ "PackMachPPC32", "classPackMachPPC32.html", "classPackMachPPC32" ],
    [ "PackMachPPC64", "classPackMachPPC64.html", "classPackMachPPC64" ],
    [ "PackMaster", "classPackMaster.html", "classPackMaster" ],
    [ "PackNetBSDElf32x86", "classPackNetBSDElf32x86.html", "classPackNetBSDElf32x86" ],
    [ "PackOpenBSDElf32x86", "classPackOpenBSDElf32x86.html", "classPackOpenBSDElf32x86" ],
    [ "PackPs1", "classPackPs1.html", "classPackPs1" ],
    [ "PackSys", "classPackSys.html", "classPackSys" ],
    [ "PackTmt", "classPackTmt.html", "classPackTmt" ],
    [ "PackTos", "classPackTos.html", "classPackTos" ],
    [ "PackUnix", "classPackUnix.html", "classPackUnix" ],
    [ "PackUnixBe32", "classPackUnixBe32.html", "classPackUnixBe32" ],
    [ "PackUnixLe32", "classPackUnixLe32.html", "classPackUnixLe32" ],
    [ "PackVmlinuxAMD64", "classPackVmlinuxAMD64.html", "classPackVmlinuxAMD64" ],
    [ "PackVmlinuxARMEB", "classPackVmlinuxARMEB.html", "classPackVmlinuxARMEB" ],
    [ "PackVmlinuxARMEL", "classPackVmlinuxARMEL.html", "classPackVmlinuxARMEL" ],
    [ "PackVmlinuxBase", "classPackVmlinuxBase.html", "classPackVmlinuxBase" ],
    [ "PackVmlinuxI386", "classPackVmlinuxI386.html", "classPackVmlinuxI386" ],
    [ "PackVmlinuxPPC32", "classPackVmlinuxPPC32.html", "classPackVmlinuxPPC32" ],
    [ "PackVmlinuxPPC64LE", "classPackVmlinuxPPC64LE.html", "classPackVmlinuxPPC64LE" ],
    [ "PackVmlinuzARMEL", "classPackVmlinuzARMEL.html", "classPackVmlinuzARMEL" ],
    [ "PackVmlinuzI386", "classPackVmlinuzI386.html", "classPackVmlinuzI386" ],
    [ "PackW32PeI386", "classPackW32PeI386.html", "classPackW32PeI386" ],
    [ "PackW64PeAmd64", "classPackW64PeAmd64.html", "classPackW64PeAmd64" ],
    [ "PackW64PeArm64", "classPackW64PeArm64.html", "classPackW64PeArm64" ],
    [ "PackW64PeArm64EC", "classPackW64PeArm64EC.html", "classPackW64PeArm64EC" ],
    [ "PackWcle", "classPackWcle.html", "classPackWcle" ],
    [ "PackWinCeArm", "classPackWinCeArm.html", "classPackWinCeArm" ],
    [ "PeFile", "classPeFile.html", "classPeFile" ],
    [ "PeFile32", "classPeFile32.html", "classPeFile32" ],
    [ "PeFile64", "classPeFile64.html", "classPeFile64" ],
    [ "Ptr", "structPtr.html", "structPtr" ],
    [ "PtrOrSpan", "structPtrOrSpan.html", "structPtrOrSpan" ],
    [ "PtrOrSpanOrNull", "structPtrOrSpanOrNull.html", "structPtrOrSpanOrNull" ],
    [ "routines_command", "structroutines__command.html", "structroutines__command" ],
    [ "routines_command_64", "structroutines__command__64.html", "structroutines__command__64" ],
    [ "rpath_command", "structrpath__command.html", "structrpath__command" ],
    [ "Span", "structSpan.html", "structSpan" ],
    [ "Throwable", "classThrowable.html", "classThrowable" ],
    [ "timespec", "structtimespec.html", "structtimespec" ],
    [ "timeval", "structtimeval.html", "structtimeval" ],
    [ "ucl_compress_config_t", "structucl__compress__config__t.html", "structucl__compress__config__t" ],
    [ "ucl_compress_result_t", "structucl__compress__result__t.html", "structucl__compress__result__t" ],
    [ "UiPacker", "classUiPacker.html", "classUiPacker" ],
    [ "UnknownExecutableFormatException", "classUnknownExecutableFormatException.html", "classUnknownExecutableFormatException" ],
    [ "upx_callback_t", "structupx__callback__t.html", "structupx__callback__t" ],
    [ "upx_charptr_unit_type", "structupx__charptr__unit__type.html", "structupx__charptr__unit__type" ],
    [ "upx_compress_config_t", "structupx__compress__config__t.html", "structupx__compress__config__t" ],
    [ "upx_compress_result_t", "structupx__compress__result__t.html", "structupx__compress__result__t" ],
    [ "upx_is_integral", "structupx__is__integral.html", null ],
    [ "uuid_command", "structuuid__command.html", "structuuid__command" ],
    [ "version_min_command", "structversion__min__command.html", "structversion__min__command" ],
    [ "XSpanStats", "structXSpanStats.html", "structXSpanStats" ],
    [ "zlib_compress_config_t", "structzlib__compress__config__t.html", "structzlib__compress__config__t" ],
    [ "zlib_compress_result_t", "structzlib__compress__result__t.html", "structzlib__compress__result__t" ],
    [ "zstd_compress_config_t", "structzstd__compress__config__t.html", "structzstd__compress__config__t" ],
    [ "zstd_compress_result_t", "structzstd__compress__result__t.html", "structzstd__compress__result__t" ]
];